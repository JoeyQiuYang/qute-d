{"version":3,"sources":["../../src/components/AutoScroll/index.js","App.js","../../src/utils/concurrencyFetch.js","index.js"],"names":["AutoScroll","children","className","styles","createPromise","val","time","Promise","resolve","reject","setTimeout","console","log","max","res","i","k","current","run","arr","concurrencyFetch","bind","then","r","App","style","background","speed","ReactDOM","render","document","getElementById"],"mappings":"4RAGMA,EAAa,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SACpB,OACE,yBAAKC,UAAWC,GACd,yBAAKD,UAAWC,GACd,yBAAKD,UAAWC,GADlB,GAEE,yBAAKD,UAAWC,GAJtB,MCCIC,G,KAAgB,SAACC,EAAIC,GACzB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,EAAQH,KACRC,QAGNK,QAAQC,IAAI,OCZa,SAAH,cAAeC,MAAZ,GAAH,IACpB,IAAMC,EAAN,GACIC,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EAEA,uBAAO,IAAIV,SAAQ,eACL,SAANW,IACJ,KAAOD,KAAiBF,EAAII,EAA5B,SACG,SAAC,GACAA,aACQ,YACJL,UAFJK,SAIW,WACPF,IACIF,EAAII,EAAR,QACED,MAEFF,IACUG,EAAV,QACEX,QAZP,IAgBDS,IACAF,IAGJG,OA7BkB,mCDctBE,CAAiB,CACfhB,EAAciB,KAAK,KAAK,EAAE,KAC1BjB,EAAciB,KAAK,KAAK,EAAE,KAC1BjB,EAAciB,KAAK,KAAK,EAAE,KAC1BjB,EAAciB,KAAK,KAAK,EAAE,KAC1BjB,EAAciB,KAAK,KAAK,EAAE,KAC1BjB,EAAciB,KAAK,KAAK,EAAE,KAC1BjB,EAAciB,KAAK,KAAK,EAAE,MAC1B,GAAGC,MAAK,SAACC,GACTZ,QAAQC,IAAIW,EAAG,mBAKjB,IAYeC,EAZH,WACV,OAAO,yBAAKC,MAAO,CACjBC,WAAY,WAEZ,kBAAC,EAAD,CAAYC,MAAO,SACjB,yBAAKzB,UAAU,OAAf,KACA,yBAAKA,UAAU,OAAf,KACA,yBAAKA,UAAU,OAAf,QE7BN0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c8e11717.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './styles.module.css'\n\nconst AutoScroll = ({ children }) => {\n  return (\n    <div className={styles.autoBox}>\n      <div className={styles.autoContent}>\n        <div className={styles.firstChild}>{children}</div>\n        <div className={styles.secondChild}>{children}</div>\n      </div>\n    </div>\n  )\n}\nexport default AutoScroll\n","import React from 'react'\n\nimport { AutoScroll, concurrencyFetch } from 'qute-d'\nimport 'qute-d/dist/index.css'\n\nconst createPromise = (val,time)=>{\n  return new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n      resolve(val)\n    },time)\n  })\n}\nconsole.log('444');\n\nconcurrencyFetch([\n  createPromise.bind(null,1,5000),\n  createPromise.bind(null,2,1000),\n  createPromise.bind(null,3,1000),\n  createPromise.bind(null,4,2000),\n  createPromise.bind(null,5,3000),\n  createPromise.bind(null,6,4000),\n  createPromise.bind(null,7,3000)\n],3).then((r)=>{\n  console.log(r, '------------');\n})\n\n\n\nconst App = () => {\n  return <div style={{\n    background: 'yellow'\n  }}>\n    <AutoScroll speed={'speed'} >\n      <div className='aaa'>1</div>\n      <div className='aaa'>2</div>\n      <div className='aaa'>3</div>\n    </AutoScroll>\n  </div>\n}\n\nexport default App\n","const concurrencyFetch = async (arr, max = 5) => {\n  const res = []\n  let i = 0\n  let k = 0\n  let current = 0\n\n  return new Promise((resolve, reject) => {\n    const run = () => {\n      while (current < max && i < arr.length) {\n        ;((i) => {\n          arr[i]()\n            .then((r) => {\n              res[i] = r\n            })\n            .finally(() => {\n              current--\n              if (i < arr.length) {\n                run()\n              }\n              k++\n              if (k === arr.length) {\n                resolve(res)\n              }\n            })\n        })(i)\n        current++\n        i++\n      }\n    }\n    run()\n  })\n}\n\nexport default concurrencyFetch\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}